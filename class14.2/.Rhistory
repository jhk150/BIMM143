install.packages("BiocManager")
BiocManager::install()
BiocManager::install("DESeq2")
library(BiocManager)
library(DESeq2)
library("AnnotationDbi")
library("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
biocLite("AnnotationDbi")
columns(org.Hs.eg.db)
library(DESeq2)
citation("DESeq2")
citation("DESeq2")
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds <- DESeqDataSetFromMatrix (countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds <- DESeqDataSetFromMatrix (countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds <- DESeqDataSetFromMatrix (countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
dds <- DESeqDataSetFromMatrix (countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix (countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData =counts,
colData =metadata,
desig =~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData =counts,
colData =metadata,
desig =~dex,
tidy=TRUE)
dds
dds
dds <- DESeqDataSetFromMatrix(countData =counts,
colData =metadata,
desig =~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData =counts,
colData =metadata,
desig =~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData =counts,
colData =metadata,
desig =~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData =counts,
colData =metadata,
desig =~dex,
tidy=TRUE)
dds
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData =counts,
colData =metadata,
desig =~dex,
tidy=TRUE)
dds
View(dds)
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("DESeq2")
library(BiocManager)
library(DESeq2)
library(DESeq2)
citation("DESeq2")
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE, row.names = 1)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
nrow(counts)
colnames(counts)
metadata$id
colnames(counts) == metadata$id
all(colnames(counts) == metadata$id)
metadata$dex
metadata$dex == "control"
control.inds <- metadata$dex == "control"
control <-  metadata[control.inds,]
control
control$id
head( counts[,control$id])
rowSums(counts [, control$id]) /4
control.mean <-  rowSums(counts[ , control$id])/ length(control$id)
control.mean
metadata$dex == "treated"
treated.inds <- metadata$dex == "treated"
treated <-  metadata[treated.inds,]
treated
treated$id
head( counts[,treated$id])
rowSums(counts [, treated$id]) /4
rowSums(counts [, treated$id]) /4
treated.mean <-  rowSums(counts[ , treated$id])/ length(treated$id)
treated.mean
meancounts <- data.frame(control.mean,treated.mean)
colSums(meancounts)
plot(meancounts)
plot(meancounts, log="xy")
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
which(meancounts[,1]==0)
which(meancounts[,1:2]==0,arr.ind = TRUE)
unique(which(meancounts[,1:2]== 0,arr.ind = TRUE)[,1])
to.rm  <-  unique(which(meancounts[,1:2]== 0,arr.ind = TRUE)[,1])
mycounts <- meancounts[-to.rm,]
nrow(mycounts)
up.inds <-  mycounts$log2fc > 2
sum(up.inds)
down.inds <-  mycounts$log2fc < -2
sum(down.inds)
head(mycounts[up.inds,])
anno <- read.csv("annotables_grch38.csv")
head(anno)
#use the merge function
mycounts.anno <-  merge(mycounts, anno, by.x ="row.names", by.y= "ensgene")
mycounts.anno
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
mycounts$symbol <- mapIds(org.Hs.eg.db,
keys= row.names(mycounts),    # gene name in our dataset
keytype="ENSEMBL",            # format of our gene names
column = "SYMBOL")            # what new data we want to add
head(mycounts)
mycounts$entrez <- mapIds(org.Hs.eg.db,
keys= row.names(mycounts),    # gene name in our dataset
keytype="ENSEMBL",            # format of our gene names
column = "ENTREZID")            # what new data we want to add
head(mycounts)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeq(dds)
res <- results(dds)
summary(res)
res05 <- results(dds, alpha=0.05)
summary(res05)
resSig05 <- subset(as.data.frame(res), padj < 0.05)
nrow(resSig05)
res01 <- as.data.frame(results(dds, alpha= 0.01))
head(res01)
#Example of using order to sort a vector
x <- c(5,4,1,2)
x[order(x)]
ord.inds <- order(res01$padj)
write.csv(res01[ord.inds,], file="signif01_results.csv")
plot(res01$log2FoldChange, res01$padj)
plot(res01$log2FoldChange, log(res01$padj))
plot(res01$log2FoldChange, -log(res01$padj))
# Setup our custom point color vector
mycols <- rep("gray", nrow(res01))
mycols[ res01$padj < 0.01 ]  <- "black"
mycols [abs(res01$log2FoldChange)>2] <- "blue"
mycols [(res01$padj < 0.01) & (abs(res01>2] <- "blue"
# Setup our custom point color vector
mycols <- rep("gray", nrow(res01))
mycols[ res01$padj < 0.01 ]  <- "black"
mycols [abs(res01$log2FoldChange)>2] <- "blue"
mycols [(res01$padj < 0.01) & (abs(res01>2)] <- "blue"
# Setup our custom point color vector
mycols <- rep("gray", nrow(res01))
mycols[ res01$padj < 0.01 ]  <- "black"
mycols [abs(res01$log2FoldChange)>2] <- "blue"
mycols [(res01$padj < 0.01) & (abs(res01>2))] <- "blue"
# Setup our custom point color vector
mycols <- rep("gray", nrow(res01))
mycols[ res01$padj < 0.01 ]  <- "black"
mycols [abs(res01$log2FoldChange)>2] <- "blue"
mycols [(res01$padj < 0.01) & (abs(res01>2))] <- "blue"
library("DESeq", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
knit_with_parameters('~/Desktop/BIMMPORT/Bimm143_git/class14.2/class14.2.Rmd')
BiocManager::install("DESeq")
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE, row.names = 1)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
nrow(counts)
colnames(counts)
metadata$id
colnames(counts) == metadata$id
all(colnames(counts) == metadata$id)
metadata$dex
metadata$dex == "control"
control.inds <- metadata$dex == "control"
control <-  metadata[control.inds,]
control
control$id
head( counts[,control$id])
rowSums(counts [, control$id]) /4
control.mean <-  rowSums(counts[ , control$id])/ length(control$id)
control.mean
metadata$dex == "treated"
treated.inds <- metadata$dex == "treated"
treated <-  metadata[treated.inds,]
treated
treated$id
head( counts[,treated$id])
rowSums(counts [, treated$id]) /4
rowSums(counts [, treated$id]) /4
treated.mean <-  rowSums(counts[ , treated$id])/ length(treated$id)
treated.mean
meancounts <- data.frame(control.mean,treated.mean)
colSums(meancounts)
plot(meancounts)
library(DESeq)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE, row.names = 1)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
nrow(counts)
colnames(counts)
metadata$id
colnames(counts) == metadata$id
all(colnames(counts) == metadata$id)
metadata$dex
metadata$dex == "control"
control.inds <- metadata$dex == "control"
control <-  metadata[control.inds,]
control
control$id
head( counts[,control$id])
rowSums(counts [, control$id]) /4
control.mean <-  rowSums(counts[ , control$id])/ length(control$id)
control.mean
metadata$dex == "treated"
treated.inds <- metadata$dex == "treated"
treated <-  metadata[treated.inds,]
treated
treated$id
head( counts[,treated$id])
rowSums(counts [, treated$id]) /4
rowSums(counts [, treated$id]) /4
treated.mean <-  rowSums(counts[ , treated$id])/ length(treated$id)
treated.mean
meancounts <- data.frame(control.mean,treated.mean)
colSums(meancounts)
plot(meancounts)
plot(meancounts, log="xy")
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
which(meancounts[,1]==0)
which(meancounts[,1:2]==0,arr.ind = TRUE)
unique(which(meancounts[,1:2]== 0,arr.ind = TRUE)[,1])
to.rm  <-  unique(which(meancounts[,1:2]== 0,arr.ind = TRUE)[,1])
mycounts <- meancounts[-to.rm,]
nrow(mycounts)
up.inds <-  mycounts$log2fc > 2
sum(up.inds)
down.inds <-  mycounts$log2fc < -2
sum(down.inds)
head(mycounts[up.inds,])
anno <- read.csv("annotables_grch38.csv")
head(anno)
#use the merge function
mycounts.anno <-  merge(mycounts, anno, by.x ="row.names", by.y= "ensgene")
mycounts.anno
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
mycounts$symbol <- mapIds(org.Hs.eg.db,
keys= row.names(mycounts),    # gene name in our dataset
keytype="ENSEMBL",            # format of our gene names
column = "SYMBOL")            # what new data we want to add
head(mycounts)
mycounts$entrez <- mapIds(org.Hs.eg.db,
keys= row.names(mycounts),    # gene name in our dataset
keytype="ENSEMBL",            # format of our gene names
column = "ENTREZID")            # what new data we want to add
head(mycounts)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeq(dds)
res <- results(dds)
summary(res)
res05 <- results(dds, alpha=0.05)
summary(res05)
resSig05 <- subset(as.data.frame(res), padj < 0.05)
nrow(resSig05)
res01 <- as.data.frame(results(dds, alpha= 0.01))
head(res01)
#Example of using order to sort a vector
x <- c(5,4,1,2)
x[order(x)]
ord.inds <- order(res01$padj)
write.csv(res01[ord.inds,], file="signif01_results.csv")
plot(res01$log2FoldChange, res01$padj)
plot(res01$log2FoldChange, log(res01$padj))
plot(res01$log2FoldChange, -log(res01$padj))
# Setup our custom point color vector
mycols <- rep("gray", nrow(res01))
mycols[ res01$padj < 0.01 ]  <- "black"
mycols [abs(res01$log2FoldChange)>2] <- "blue"
mycols [(res01$padj < 0.01) & (abs(res01>2))] <- "blue"
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE, row.names = 1)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
nrow(counts)
colnames(counts)
metadata$id
colnames(counts) == metadata$id
all(colnames(counts) == metadata$id)
metadata$dex
metadata$dex == "control"
control.inds <- metadata$dex == "control"
control <-  metadata[control.inds,]
control
control$id
head( counts[,control$id])
rowSums(counts [, control$id]) /4
control.mean <-  rowSums(counts[ , control$id])/ length(control$id)
control.mean
metadata$dex == "treated"
treated.inds <- metadata$dex == "treated"
treated <-  metadata[treated.inds,]
treated
treated$id
head( counts[,treated$id])
rowSums(counts [, treated$id]) /4
rowSums(counts [, treated$id]) /4
treated.mean <-  rowSums(counts[ , treated$id])/ length(treated$id)
treated.mean
meancounts <- data.frame(control.mean,treated.mean)
colSums(meancounts)
plot(meancounts)
plot(meancounts, log="xy")
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
which(meancounts[,1]==0)
which(meancounts[,1:2]==0,arr.ind = TRUE)
unique(which(meancounts[,1:2]== 0,arr.ind = TRUE)[,1])
to.rm  <-  unique(which(meancounts[,1:2]== 0,arr.ind = TRUE)[,1])
mycounts <- meancounts[-to.rm,]
nrow(mycounts)
up.inds <-  mycounts$log2fc > 2
sum(up.inds)
down.inds <-  mycounts$log2fc < -2
sum(down.inds)
head(mycounts[up.inds,])
anno <- read.csv("annotables_grch38.csv")
head(anno)
#use the merge function
mycounts.anno <-  merge(mycounts, anno, by.x ="row.names", by.y= "ensgene")
mycounts.anno
library("AnnotationDbi")
library("org.Hs.eg.db")
columns(org.Hs.eg.db)
mycounts$symbol <- mapIds(org.Hs.eg.db,
keys= row.names(mycounts),    # gene name in our dataset
keytype="ENSEMBL",            # format of our gene names
column = "SYMBOL")            # what new data we want to add
head(mycounts)
mycounts$entrez <- mapIds(org.Hs.eg.db,
keys= row.names(mycounts),    # gene name in our dataset
keytype="ENSEMBL",            # format of our gene names
column = "ENTREZID")            # what new data we want to add
head(mycounts)
counts <- read.csv("airway_scaledcounts.csv", stringsAsFactors = FALSE)
metadata <-  read.csv("airway_metadata.csv", stringsAsFactors = FALSE)
library(DESeq2)
citation("DESeq2")
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex,
tidy=TRUE)
dds
dds <- DESeq(dds)
res <- results(dds)
summary(res)
res05 <- results(dds, alpha=0.05)
summary(res05)
resSig05 <- subset(as.data.frame(res), padj < 0.05)
nrow(resSig05)
res01 <- as.data.frame(results(dds, alpha= 0.01))
head(res01)
#Example of using order to sort a vector
x <- c(5,4,1,2)
x[order(x)]
ord.inds <- order(res01$padj)
write.csv(res01[ord.inds,], file="signif01_results.csv")
plot(res01$log2FoldChange, res01$padj)
plot(res01$log2FoldChange, log(res01$padj))
plot(res01$log2FoldChange, -log(res01$padj))
# Setup our custom point color vector
mycols <- rep("gray", nrow(res01))
mycols[ res01$padj < 0.01 ]  <- "black"
mycols [abs(res01$log2FoldChange)>2] <- "blue"
mycols [(res01$padj < 0.01) & (abs(res01>2))] <- "blue"
